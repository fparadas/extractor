defmodule Extractor.Cohere.Client do
  alias Extractor.Cohere.Client

  @moduledoc """
  A client module for interacting with the Cohere API, which provides various machine learning models.

  This module facilitates the generation of text using the Cohere API by handling the HTTP request
  and response processes. It allows configuration of request parameters and handles the generation request.
  """

  @type t :: %Client{
          url: String.t(),
          headers: list({String.t(), String.t()})
        }

  defstruct [:url, :headers]

  @doc """
  Creates a new `%Extractor.Cohere.Client{}` struct with default or provided configurations.

  It sets up the client with default API endpoint and headers, including the authorization header
  with an API key fetched from the application environment. Custom options can override these defaults.

  ## Parameters

  - `opts`: Keyword list of options to override default client configurations. Supports keys like `:url` and `:headers`.

  ## Returns

  A new `%Extractor.Cohere.Client{}` struct configured for interacting with the Cohere API.
  """
  @spec new(keyword()) :: t
  def new(opts \\ []) do
    defaults = [
      url: "https://api.cohere.ai/v1",
      headers: default_headers()
    ]

    struct(Client, Enum.into(opts, defaults))
  end

  defp default_headers do
    api_key = Application.fetch_env!(:extractor, :cohere_api_key)

    [
      {"Authorization", "Bearer #{api_key}"},
      {"Content-Type", "application/json"},
      {"Accept", "application/json"}
    ]
  end

  @doc """
  Generates text using the Cohere 'generate' API endpoint.

  This function prepares the request body with the specified parameters and makes a POST request
  to the Cohere API's `/generate` endpoint. It then processes the response to extract the generated text.

  ## Parameters

  - `client`: The `%Extractor.Cohere.Client{}` struct containing the API configurations.
  - `model`: The model identifier to use for text generation.
  - `prompt`: The input prompt for text generation.
  - `max_tokens`: The maximum number of tokens to generate (optional, defaults to 50).
  - `temperature`: The temperature setting for generation randomness (optional, defaults to 1.0).
  - `http_client`: The HTTP client module for making the request (optional, defaults to HTTPoison).

  ## Returns

  On success, returns `{:ok, generated_text}` where `generated_text` is the text generated by the API.
  On failure, returns `{:error, reason}` indicating the error encountered during the request.
  """
  @spec generate(Client.t(), String.t(), String.t(), integer(), float(), module()) ::
          {:ok, String.t()} | {:error, any()}
  def generate(
        client,
        model,
        prompt,
        max_tokens \\ 50,
        temperature \\ 1.0,
        http_client \\ HTTPoison
      ) do
    body = prepare_generate_body(model, prompt, max_tokens, temperature)

    case post(client, "/generate", body, http_client) do
      {:ok, response_body} ->
        generated_text = handle_generate_response(response_body)
        {:ok, generated_text}

      {:error, reason} ->
        {:error, reason}
    end
  end

  defp post(client, endpoint, body, http_client) do
    full_url = client.url <> endpoint

    case http_client.post(full_url, body, client.headers) do
      {:ok, %HTTPoison.Response{status_code: 200, body: response_body}} ->
        {:ok, response_body}

      {:ok, %HTTPoison.Response{status_code: status_code}} ->
        {:error, "Request failed with status code #{status_code}"}

      {:error, %HTTPoison.Error{reason: reason}} ->
        {:error, reason}
    end
  end

  defp prepare_generate_body(model, prompt, max_tokens, temperature) do
    %{
      model: model,
      prompt: prompt,
      max_tokens: max_tokens,
      temperature: temperature
    }
    |> Jason.encode!()
  end

  defp handle_generate_response(body) do
    body |> Jason.decode!() |> Map.get("generated_text")
  end

  @doc """
  Classifies text using the Cohere 'classify' API endpoint.

  This function prepares the request body with specified parameters for text classification and
  makes a POST request to the Cohere API's `/classify` endpoint. It then processes the response
  to extract the classification results.

  ## Parameters

  - `client`: The `%Extractor.Cohere.Client{}` struct containing the API configurations.
  - `model`: The model identifier to use for classification.
  - `inputs`: A list of text inputs to classify.
  - `examples`: A list of example inputs and their corresponding labels for the classifier (optional).
  - `http_client`: The HTTP client module for making the request (optional, defaults to HTTPoison).

  ## Returns

  On success, returns `{:ok, classifications}` where `classifications` are the results from the API.
  On failure, returns `{:error, reason}` indicating the error encountered during the request.
  """
  @spec classify(Client.t(), String.t(), list(String.t()), list(map()), module()) ::
          {:ok, any()} | {:error, any()}
  def classify(
        client,
        model,
        inputs,
        examples \\ [],
        http_client \\ HTTPoison
      ) do
    body = prepare_classify_body(model, inputs, examples)

    case post(client, "/classify", body, http_client) do
      {:ok, response_body} ->
        classifications = handle_classify_response(response_body)
        {:ok, classifications}

      {:error, reason} ->
        {:error, reason}
    end
  end

  defp prepare_classify_body(model, inputs, examples) do
    %{
      model: model,
      inputs: inputs,
      examples: examples
    }
    |> Jason.encode!()
  end

  defp handle_classify_response(body) do
    body |> Jason.decode!() |> Map.get("classifications")
  end
end
