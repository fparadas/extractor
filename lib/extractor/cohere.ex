defmodule Extractor.Cohere do
  alias Extractor.Cohere.Client

  @doc """
  Classifies text using the Cohere 'classify' API endpoint.

  This function prepares the request body with specified parameters for text classification and
  makes a POST request to the Cohere API's `/classify` endpoint. It then processes the response
  to extract the classification results.

  ## Parameters

  - `client`: The `%Extractor.Cohere.Client{}` struct containing the API configurations.
  - `model`: The model identifier to use for classification.
  - `inputs`: A list of text inputs to classify.
  - `examples`: A list of example inputs and their corresponding labels for the classifier (optional).
  - `http_client`: The HTTP client module for making the request (optional, defaults to HTTPoison).

  ## Returns

  On success, returns `{:ok, classifications}` where `classifications` are the results from the API.
  On failure, returns `{:error, reason}` indicating the error encountered during the request.
  """
  @spec classify(Client.t(), String.t(), list(String.t()), list(map()), module()) ::
          {:ok, any()} | {:error, any()}
  def classify(
        client,
        model,
        inputs,
        examples \\ [],
        http_client \\ HTTPoison
      ) do
    body = prepare_classify_body(model, inputs, examples)

    case Client.post(client, "/classify", body, http_client) do
      {:ok, response_body} ->
        classifications = handle_classify_response(response_body)
        {:ok, classifications}

      {:error, reason} ->
        {:error, reason}
    end
  end

  defp prepare_classify_body(model, inputs, examples) do
    %{
      model: model,
      inputs: inputs,
      examples: examples
    }
    |> Jason.encode!()
  end

  defp handle_classify_response(body) do
    body |> Jason.decode!()
  end

  @doc """
  Generates text using the Cohere 'generate' API endpoint.

  This function prepares the request body with the specified parameters and makes a POST request
  to the Cohere API's `/generate` endpoint. It then processes the response to extract the generated text.

  ## Parameters

  - `client`: The `%Extractor.Cohere.Client{}` struct containing the API configurations.
  - `model`: The model identifier to use for text generation.
  - `prompt`: The input prompt for text generation.
  - `max_tokens`: The maximum number of tokens to generate (optional, defaults to 50).
  - `temperature`: The temperature setting for generation randomness (optional, defaults to 1.0).
  - `http_client`: The HTTP client module for making the request (optional, defaults to HTTPoison).

  ## Returns

  On success, returns `{:ok, generated_text}` where `generated_text` is the text generated by the API.
  On failure, returns `{:error, reason}` indicating the error encountered during the request.
  """
  @spec generate(Client.t(), String.t(), String.t(), integer(), float(), module()) ::
          {:ok, String.t()} | {:error, any()}
  def generate(
        client,
        model,
        prompt,
        max_tokens \\ 50,
        temperature \\ 1.0,
        http_client \\ HTTPoison
      ) do
    body = prepare_generate_body(model, prompt, max_tokens, temperature)

    case Client.post(client, "/generate", body, http_client) do
      {:ok, response_body} ->
        generated_text = handle_generate_response(response_body)
        {:ok, generated_text}

      {:error, reason} ->
        {:error, reason}
    end
  end

  defp prepare_generate_body(model, prompt, max_tokens, temperature) do
    %{
      model: model,
      prompt: prompt,
      max_tokens: max_tokens,
      temperature: temperature
    }
    |> Jason.encode!()
  end

  defp handle_generate_response(body) do
    body |> Jason.decode!()
  end
end
